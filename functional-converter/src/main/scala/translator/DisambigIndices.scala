package translator

import java.util.concurrent.atomic.AtomicInteger
import scala.collection.mutable
import scala.meta.Term

/**
 * Mutable container for the indices used to disambiguate value/method/iterable names
 * (e.g. the `_1` in `val x = 0; val x_1 = x + 1` `var x = 0; x += 1`)
 */
class DisambigIndices {
  import DisambigIndices.{ autogeneratedMethodPrefix, autogeneratedIterablePrefix }

  private val methodIdx = new AtomicInteger(0)
  private val iterableIdx = new AtomicInteger(0)

  // keys are the variable names in the original program, values are the current indices
  private val variablesIndices = mutable.Map[String, Int]()

  /**
   * Increment the index of the auto-generated methods and return the old value
   * @return value before incrementing
   */
  def getAndIncrementAutoGenMethodName(): Term.Name = Term.Name(s"${autogeneratedMethodPrefix}_${methodIdx.getAndIncrement()}")

  /**
   * Increment the index of the auto-generated iterators (used in the translation of for loops) and return the old value
   * @return value before incrementing
   */
  def getAndIncrementIterableName(): Term.Name = Term.Name(s"${autogeneratedIterablePrefix}_${iterableIdx.getAndIncrement()}")

  /**
   * Increment the index associated with the given name and return the old value
   * @param rawName the given name
   * @return value before incrementing
   */
  def getAndIncrementDisambigIdxFor(rawName: String): Int = {
    val currIdx = variablesIndices.getOrElse(rawName, 0)
    variablesIndices.update(rawName, currIdx + 1)
    currIdx
  }

  /**
   * Increment the index associated with the given name and return the name with the index before incrementing
   * @param rawName the given name
   * @return the name with the index before incrementing
   */
  def incrementIndexAndGetDisambigNameFor(rawName: String): Term.Name = {
    val idx = getAndIncrementDisambigIdxFor(rawName)
    Term.Name(s"${rawName}_$idx")
  }

}

object DisambigIndices {

  val autogeneratedMethodPrefix = "autoGen"
  val autogeneratedIterablePrefix = "iterable"

}

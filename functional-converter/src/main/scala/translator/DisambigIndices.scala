package translator

import java.util.concurrent.atomic.AtomicInteger
import scala.collection.mutable
import scala.meta.Term

class DisambigIndices {
  import DisambigIndices.{ autogeneratedMethodPrefix, autogeneratedIterablePrefix }

  private val methodIdx = new AtomicInteger(0)
  private val iterableIdx = new AtomicInteger(0)
  private val variablesIndices = mutable.Map[String, Int]()

  def incAndGetAutoGenMethodName(): Term.Name = Term.Name(s"${autogeneratedMethodPrefix}_${methodIdx.getAndIncrement()}")

  def incAndGetIterableName(): Term.Name = Term.Name(s"${autogeneratedIterablePrefix}_${iterableIdx.getAndIncrement()}")

  def incAndGetDisambigIdxFor(rawName: String): Int = {
    val currIdx = variablesIndices.getOrElse(rawName, 0)
    variablesIndices.update(rawName, currIdx + 1)
    currIdx
  }

  def incAndGetDisambigNameFor(rawName: String): Term.Name = {
    val idx = incAndGetDisambigIdxFor(rawName)
    Term.Name(s"${rawName}_$idx")
  }

}

object DisambigIndices {

  val autogeneratedMethodPrefix = "autoGen"
  val autogeneratedIterablePrefix = "iterable"

}

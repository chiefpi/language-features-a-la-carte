/*
mode = whitelist
excludedFeatures = [
  AdvancedOop
]
*/

transparent trait Baz { /*
^^^^^^^^^^^
not in the allowed features: Metaprogramming, Extensions, Laziness, Imports, LiteralFunctions, StringInterpolation, LiteralsAndExpressions, PolymorphicTypes, AlwaysAllowed, Annotations, Xml, ForExpr, Infixes, Inlines, Defs, ContextualConstructs, Packages, Exports, ADTs, Vals, ImperativeConstructs, Nulls, ADTs, BasicOopAddition */
  def lmnop(y: Int): Int
}

open class Foo { /*
^^^^
not in the allowed features: Metaprogramming, Extensions, Laziness, Imports, LiteralFunctions, StringInterpolation, LiteralsAndExpressions, PolymorphicTypes, AlwaysAllowed, Annotations, Xml, ForExpr, Infixes, Inlines, Defs, ContextualConstructs, Packages, Exports, ADTs, Vals, ImperativeConstructs, Nulls, ADTs, BasicOopAddition */

  def abc(x: Float): Boolean = x.isWhole

  final def wxyz(s: String): Int = s.length /*
  ^^^^^
  not in the allowed features: Metaprogramming, Extensions, Laziness, Imports, LiteralFunctions, StringInterpolation, LiteralsAndExpressions, PolymorphicTypes, AlwaysAllowed, Annotations, Xml, ForExpr, Infixes, Inlines, Defs, ContextualConstructs, Packages, Exports, ADTs, Vals, ImperativeConstructs, Nulls, ADTs, BasicOopAddition */
}

class FooImpl extends Foo, Baz {
  override def abc(x: Float): Boolean = x.isNaN
  override def lmnop(y: Int): Int = 2*y
}

case class Foo2(i: Int)
